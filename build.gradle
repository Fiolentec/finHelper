plugins {
    id 'org.springframework.boot' version '2.3.4.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'com.belogrudov'
version = '0.0.2'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
    sshAntTask
}

repositories {
    mavenCentral()
}

dependencies {
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.3'
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compile 'org.springframework.boot:spring-boot-starter-data-jpa'
    sshAntTask 'org.apache.ant:ant-jsch:1.10.10'
    implementation group: 'org.apache.ant', name: 'ant-jsch', version: '1.10.10'
    implementation('org.postgresql:postgresql')
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation('com.fasterxml.jackson.dataformat:jackson-dataformat-xml:2.12.3')

    compile group: 'org.telegram', name: 'telegrambots-spring-boot-starter', version: '4.4.0.2'
    compile group: 'org.telegram', name: 'telegrambots', version: '4.9.1'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-xml', version: '2.12.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.12.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.12.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.12.3'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.0'

}

test {
    useJUnitPlatform()
}




task cleanAndCopyJar(dependsOn: build)  {
    doLast {
        ant.taskdef(
                name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.sshAntTask.asPath)

        ant.taskdef(
                name: 'ssh',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.sshAntTask.asPath)
        // Create a new file for each execution to make
        // sure that execution doesn't fails in case
        // idententy of host has been changed.
        def knownHosts = File.createTempFile("knownhosts", "txt")
        def user = 'ubuntu'
        def host = 'ec2-13-48-248-16.eu-north-1.compute.amazonaws.com'
        def privateKey = file('../fiolent.pem')

        try {
            ant.ssh(
                    host: host,
                    username: user,
                    keyfile: privateKey,
                    trust: true,
                    knownhosts: knownHosts,
                    command: "sudo rm -rf build/libs/javabot-0.0.2.jar || true"
            )

            // Example to copy files to a remote host.
            ant.scp(
                    file: file("build/libs/javabot-0.0.2.jar"),
                    todir: "${user}@${host}:~/build/libs",
                    keyfile: privateKey,
                    trust: true,
                    knownhosts: knownHosts
            )


        } finally {
            knownHosts.delete()
        }
    }
}

task runBashScript(dependsOn: cleanAndCopyJar){
    doLast {
        ant.taskdef(
                name: 'scp',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
                classpath: configurations.sshAntTask.asPath)

        ant.taskdef(
                name: 'ssh',
                classname: 'org.apache.tools.ant.taskdefs.optional.ssh.SSHExec',
                classpath: configurations.sshAntTask.asPath)
        def knownHosts = File.createTempFile("knownhosts", "txt")
        def user = 'ubuntu'
        def host = 'ec2-13-48-248-16.eu-north-1.compute.amazonaws.com'
        def privateKey = file('../fiolent.pem')

        try {
            // Example to execute a command on the remote host.
            ant.ssh(
                    host: host,
                    username: user,
                    keyfile: privateKey,
                    trust: true,
                    knownhosts: knownHosts,
                    command: "sudo bash script.sh"
            )

        } finally {
            knownHosts.delete()
        }
    }
}